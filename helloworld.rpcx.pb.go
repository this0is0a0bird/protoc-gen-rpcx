// Code generated by david client code gen. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          v3.17.0
// source: helloworld.proto

package greeter_service

import (
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO

// ================== interface skeleton ===================
type GreeterAble interface {
	// GreeterAble can be used for interface verification.

	// SayHello is server rpc method as defined
	SayHello(ctx context.Context, args *HelloRequest, reply *HelloReply) (err error)
}

//================== client stub ===================
// Greeter is a client wrapped XClient.
type GreeterClient struct {
	service string
}

// NewGreeterClient wraps a XClient as GreeterClient.
// You can pass a shared XClient object created by NewXClientForGreeter.
func NewGreeterClient(service ...string) *GreeterClient {
	var serviceName string
	if len(service) < 1 {
		serviceName = "greeter/service"
	} else {
		serviceName = service[0]
	}
	return &GreeterClient{service: serviceName}
}

// SayHello is client rpc method as defined
func (c *GreeterClient) SayHello(ctx context.Context, args *HelloRequest) (reply *HelloReply, err error) {
	reply = &HelloReply{}
	err = rpcclient.GetRpcClient().Call(ctx, c.service, "SayHello", args, reply)
	return reply, err
}
